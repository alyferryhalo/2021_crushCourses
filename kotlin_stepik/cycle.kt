// Жители системы Жука имеют достаточно высокую даже по галактическим меркам продолжительность жизни. Поэтому пришельцы были крайне удивлены тем, что 
// 1) земляне зачем-то измеряют отрезки времени 2) как они их именуют. Это очень сильно осложняет культурный обмен. При попытках земного исследователя
// соотнести факты рассказанные пришельцем, последний непонимающе моргает всеми пятью глазами и устало берется за голову передней лапкой. 
// Поэтому, земляне придумали упрощенную систему летоисчисления специально для гостей с далеких звезд.
// Реализуйте функцию getYearEra, которая для введенного в качестве аргумента функции года возвращает один из возможных вариантов его положения 
// относительно даты начала Unix-эры (1970 год) в виде строки:
// before
// equals
// after (XX century)
// after (XXI century)
// distant future

fun getYearEra(year: Int): String{
    return when {
        year < 1970 -> "before"
        year == 1970 -> "equals"
        year in 1971..2000 -> "after (XX century)"
        year in 2001..2100 -> "after (XXI century)"
        else -> "distant future"
    }
}

//

// Пришельцы открыли посольства в главных городах Земли. Для их функционирования требуется огромное множество различных наемных работников - 
// повара, охранники, клерки, бухгалтера. И именно последние столкнулись со страшной проблемой. В виду (доходящей до абсурда) разницы в подходах 
// к экономическим вопросам, платежные ведомости предоставляются пришельцами в ужасном беспорядке. Итоговая заработная плата работников землян 
// зачем-то пишется в виде отдельных четных цифр (которые нужно просуммировать) вперемешку с  нечетными цифрами одной строкой для каждого сотрудника.
// Реализуйте функцию calculateEvenDigits, которая находит сумму четных цифр в строке.

fun calculateEvenDigits(input:String): Int{
    var sum: Int = 0
    var temp: Int = 0
    for (x in input) {
        temp = x.toString().toInt()
        if (temp % 2 == 0) sum += temp
    }
    return sum
}

//

// Работники-земляне также были неприятно удивлены тем фактом, что им приходится сортировать корреспонденцию пришельцев на их родном языке. 
// Не спас ситуацию и тот факт, что гости со звезд милостиво согласились предоставить копии документов в английской транслитерации. 
// Единственно, что стало понятно - чем больше употребляется слово BUG в документе, тем он важнее.
// Реализуйте функцию calculateBugMentions, которая находит количество употреблений слова BUG в списке.

fun calculateBugMentions(input:List<String>): Int{
    var sum: Int = 0
    for (bug in input) {
        if (bug == "BUG") {
            sum++
        }
    }
    return sum
}
